#version 430 core

layout(binding = 0, rgba32f) uniform writeonly image2D framebuffer;

uniform sampler2D colorTexture;
uniform mat4 mat_inverse;
uniform mat4 persp_inverse;
uniform float lightIntensity;
uniform vec3 lightPosition;
uniform float shininess;
uniform float eta;
uniform vec3 bbmin;
uniform vec3 bbmax;
uniform float radius;
uniform float groundDistance;
uniform vec3 center;
uniform int bouncesNb;
uniform float kr = 0.2;

#define MAX_SCENE_BOUNDS    10.0
#define EPS                 0.000001
#define DEBUG               false

int GROUND = -1;
int NOTHING = -2;

struct hitinfo_t {
    vec4 t;
    int hit_vptr;
};

struct ray_t {
	vec4 orig;
	vec4 dir;
	float F; //Fresnel coeff
    hitinfo_t h;
};

layout (std430, binding = 1) buffer Vertices
{
    vec4 vertices[];
};

layout (std430, binding = 2) buffer Normals
{
    vec4 normals[];
};

layout (std430, binding = 3) buffer Colors
{
    vec4 colors[];
};

layout (std430, binding = 4) buffer Meshes
{
    int indices[];
};

bool intersectBoundingBox(vec4 origin, vec4 dir) {
	// DONE
    vec3 P = vec3(origin);
    vec3 u = vec3(dir);

    vec3 tmin = (bbmin - P) / u;
    vec3 tmax = (bbmax - P) / u;

    vec3 min_vec = vec3(min(tmin.x, tmax.x), min(tmin.y, tmax.y), min(tmin.z, tmax.z));
    vec3 max_vec = vec3(max(tmin.x, tmax.x), max(tmin.y, tmax.y), max(tmin.z, tmax.z));

    float go_in = max(max(min_vec.x, min_vec.y), min_vec.z);
    float go_out = min(min(max_vec.x, max_vec.y), max_vec.z);

    return go_out > go_in;
}

bool intersectTriangle(vec4 origin, vec4 dir, int ptr, out vec4 dist) 
{
    vec4 V0 = vertices[indices[ptr]]; 
    vec4 V1 = vertices[indices[ptr+1]];
    vec4 V2 = vertices[indices[ptr+2]];
    vec4 e1 = V1 - V0;
    vec4 e2 = V2 - V0;
    vec4 t = origin - V0;

    vec4 p = vec4(cross(dir.xyz, e2.xyz), 1);

    float divider = 1 / (dot(p, e1));
    float alpha = divider * dot(p, t);

    if (alpha < 0 || alpha > 1) {
        return false;
    }
    vec4 q = vec4(cross(t.xyz, e1.xyz), 1);
    float beta = divider * dot(q, dir);
    if (beta < 0 || beta > 1) {
        return false;
    }
    if (alpha + beta > 1) {
        return false;
    }
    float lambda = divider * dot(q, e2);
    if (lambda < 0) {
        return false;
    }
    dist[0] = lambda;
    dist[1] = alpha;
    dist[2] = beta;
    dist[3] = 1;
    return true;
}

vec4 getHitPoint(hitinfo_t h)
{
	int ptr = h.hit_vptr;
    vec4 P0 = vertices[indices[ptr]]; 
    vec4 P1 = vertices[indices[ptr+1]];
    vec4 P2 = vertices[indices[ptr+2]];
    vec4 Pi = vec4(1.0);
	Pi = (1 - h.t[1] - h.t[2])*P0 + h.t[1]*P1 + h.t[2]*P2;
	
    return Pi;
}

vec4 interpolateNormal(hitinfo_t h)
{
	int ptr = h.hit_vptr;
    vec4 N0 = normals[indices[ptr]]; 
    vec4 N1 = normals[indices[ptr+1]];
    vec4 N2 = normals[indices[ptr+2]];
    vec4 Ni = vec4(0);
	Ni = (1 - h.t[1] - h.t[2])*N0 + h.t[1]*N1 + h.t[2]*N2;
	
    return normalize(Ni);
}

vec4 interpolateColor(hitinfo_t h)
{
	int ptr = h.hit_vptr;
    vec4 C0 = colors[indices[ptr]]; 
    vec4 C1 = colors[indices[ptr+1]];
    vec4 C2 = colors[indices[ptr+2]];
    vec4 Ci = vec4(1);
	Ci = (1 - h.t[1] - h.t[2])*C0 + h.t[1]*C1 + h.t[2]*C2;
	
    return Ci;
}

bool isIntersctingGroundFirst(vec4 origin, vec4 dir, in out hitinfo_t h)
{
	float lambda = (-groundDistance - origin.y) / dir.y;
	if(lambda > 0 && lambda < h.t[0])
	{
		h.hit_vptr = GROUND;
		h.t = origin + lambda*dir;
		h.t[3] = lambda;
		return true;
	}
	return false;
}

bool isIntersected(vec4 origin, vec4 dir, out hitinfo_t h)
{
    vec4 dist = vec4(0); // stores distance + barycentric coord
	bool hit = false;
	h.t.x = radius * MAX_SCENE_BOUNDS;
    h.hit_vptr = NOTHING;
	if(intersectBoundingBox(origin, dir)) {
		for(int j = 0; j < indices.length(); j += 3) {
			if(intersectTriangle(origin, dir, j, dist)) {
                if (dist[0] < h.t.x) {
                    hit = true;
                    h.hit_vptr = j;
                    h.t = dist;
                }
			}
		}
	}
	if(isIntersctingGroundFirst(origin, dir, h))
	{
		hit = true;
	}
    h.t[3] = 1;
	return hit;
}

vec4 computeColor(vec4 origin, vec4 dir, vec4 vertColor, vec4 vertNormal, bool full, out float fresnel)
{
	//evrythings is in worldCoordinate
	vec4 lightVector = -normalize(origin - vec4(lightPosition,1));
	vec4 eyeVector = normalize(-dir);
	vertNormal = normalize(vertNormal);
	vec4 fragColor = vec4(0);
	float k_a = 0.2;
	float k_d = 0.7;

	vec4 halfVector = normalize(eyeVector + lightVector);

	float cosTheta = dot(halfVector,lightVector); 
	float sinTheta2 = 1-cosTheta*cosTheta ;

	float ci = eta*eta-sinTheta2;
	if (ci < 0) {	
		ci = 0;
	} else {
		ci = sqrt(ci);
	}

	float F_s = (cosTheta-ci)/(cosTheta+ci);
	float F_p = (eta*cosTheta-ci)/(eta*cosTheta+ci);
	F_s *= F_s; 
	F_p *= F_p; 

	fresnel = (F_s + F_p) / 2;

	if(full) {
		float nDotL = dot(vertNormal,lightVector);
		float nDotH = dot(vertNormal,halfVector);

		if(nDotL < 0){nDotL = 0;}
		if(nDotH < 0){nDotH = 0;}

		vec4 C_d = vertColor*lightIntensity*k_d*nDotL;
		vec4 C_s = vertColor*lightIntensity*fresnel*pow(nDotH,shininess);
		fragColor = C_d + C_s;
	}
	vec4 C_a = vertColor*lightIntensity*k_a;
    fragColor += C_a;

	return fragColor;
}

vec4 texColor(hitinfo_t h)
{
	vec2 texcoord = vec2(h.t[0]/(2*radius), h.t[2]/(2*radius));
	return texture2D(colorTexture, texcoord);
}

// Pour un point d'origine et une direction donnée, renvoit la couleur du premier pixel intersecté
vec4 trace(in out ray_t ray)
{
    // DOING : trace a ray in the scene, see what it intersects, bounce around
    hitinfo_t h;
    if (ray.h.hit_vptr == NOTHING) {
        return vec4(0, 0, 0, 1);
    }
    vec4 vertColor;
    vec4 vertNormal;
    vec4 hitPoint;
    if (ray.h.hit_vptr == GROUND)
    {
        vertColor = texColor(ray.h);		
        vertNormal = normalize(vec4(0,1,0,0));			
        hitPoint = ray.h.t;
    } else {
        vertColor = interpolateColor(ray.h);
        vertNormal = interpolateNormal(ray.h);
        hitPoint = getHitPoint(ray.h);
    }
    // Pour montrer la shadow map
    //return (hitPoint+vec4(50))/50;

    vec4 towardLight = normalize(vec4(lightPosition,1) - hitPoint);
    hitPoint += 10*towardLight;
    hitinfo_t hl;
    // IF SHADOW
    float fresnel;
    vec4 pixelColor = vec4(0);
    if(isIntersected(hitPoint, towardLight, hl))
    {
        if (DEBUG) {
            return vec4(1,1,0.0,1);
        }
        pixelColor = vec4(computeColor(ray.orig, ray.dir, vertColor, vertNormal, false, fresnel));
    } else {
        if (DEBUG) {
            return vec4(0,0,1,1);
        }
        pixelColor = vec4(computeColor(hitPoint, ray.dir, vertColor, vertNormal, true, fresnel));
    }
    ray.F = fresnel;
    return pixelColor;
}

const int MAX_TRACE = 8;

// Pour un point d'origine et une direction donnée, renvoit une couleur de pixels calculée à partir des différents rebonds
vec4 rayTrace(vec4 origin, vec4 dir)
{
    //DOING
    vec4 rayColor;
    ray_t ray[MAX_TRACE];

    ray[0].orig = origin;
    ray[0].dir = dir;
    int intersectionFound=0;
    for (int i = 0; isIntersected(ray[i].orig, ray[i].dir, ray[i].h) && (i < bouncesNb); i++)
    {
        intersectionFound++;
		vec4 normalVector = vec4(0,1,0,0);
		if(ray[i].h.hit_vptr == GROUND){
			ray[i+1].orig = ray[i].h.t; 
		} else {
			ray[i+1].orig = getHitPoint(ray[i].h);
			normalVector = interpolateNormal(ray[i].h);
		}
        ray[i+1].dir = normalize(reflect(ray[i].dir, normalVector));
        ray[i+1].orig += ray[i+1].dir; //Offset
    }

    // C0 + kr R1... avec R1 = C1 + kr*R2, etc.
	rayColor = trace(ray[intersectionFound]);
    for(int i = intersectionFound-1; i >= 0; i--)
    {
		//Direct lighting
        vec4 colorRebound = trace(ray[i]);
        rayColor *= kr; 
		rayColor += colorRebound;
    }

	//if(ray[0].h.hit_vptr > 0 && ray[1].h.hit_vptr > 0){
	//	rayColor = vec4(1,0,0,1);
	//}
	//rayColor = ray[1].dir;

    return rayColor;
}

layout (local_size_x = 8, local_size_y = 8) in;
void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }
    vec2 pos = pix / (size - vec2(0.5,0.5)); 
    // pos in [0,1]^2 Need it in [-1,1]^2:
    pos = 2 * pos - vec2(1.,1.);

    // Step 1: I need pixel coordinates. 
    vec4 worldPos = vec4(pos.x, pos.y, 1.0, 1.0);
    worldPos = persp_inverse * worldPos;
    worldPos /= worldPos.w;
    worldPos.w = 0;
    worldPos = normalize(worldPos);
    // Step 2: ray direction:
    vec4 dir = normalize(mat_inverse * worldPos);
    vec4 eye = (mat_inverse * vec4(0, 0, 0, 1));
    //vec4 color = trace(eye, dir);
    vec4 color = rayTrace(eye, dir); //DOING

    imageStore(framebuffer, pix, color);
}
